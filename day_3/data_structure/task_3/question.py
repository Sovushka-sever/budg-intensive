"""
Посмотрите сколько памяти занимают следующие объекты.
Сколько будет занимать памяти список с двумя элементами после добавления в него
еще одно элемента с помощью append? Почему?
"""

first_tuple = (1, 2)
second_tuple = (1, 2, 3)
first_list = [1, 2]
second_list = [1, 2, 3]
first_list.append({})

if __name__ == "__main__":
    print(first_tuple.__sizeof__())  # занимает 40 байт
    print(second_tuple.__sizeof__())  # занимает 48 байт
    print(first_list.__sizeof__())  # занимает 56 байт
    print(second_list.__sizeof__())  # занимет 64 байта
    print(first_list.__sizeof__())  # занимает 104 байта после добавления first_list третьего элемента

"""
В начале выполнения программы операционная система создает новый процесс и выделяет под него ресурсы.
Размер кортежа с двумя элементами равен 40 байт, с тремя - 48 байт (+8 байт за доп. указатель на фактический объект)
Тоже самое у списков: с двумя - 56 байт, с тремя - 64 байта (те же +8 байт)
list требуется как минимум 16 байт больше памяти, чем tuple, из-за перераспределения(
8 байт один дополнительный «размер» + 8 байт на «массив PyObject», т.е. list изменяемый тип данных, что 
подразумевает динамическое распределение памяти, чтобы избежать выделения пространства каждый раз, 
когда добавляется или изменяется список)
При добавлении элемента через append мы по сути - добавляем "целый кусок" памяти,
который будет распределен по многим видам использования, и приблизительно пропорционален размеру списка. 
И даже если мы добавим словарь вместо числа через append размер будет те же 104 байта
"""
